###############################################################################
#
# Primitive Levels (Loglevels are not in any order!)
#
# You can define your own primitives (see the example 'exa'):
# 1. Add the new name of the primitive to the PRIMITIVE Property.
#    (You should use three lowercase letters for your primitive name to divide 
#     it from the component levels or predefined primitives) 
# 2. Define a new property with the name of your primitive as the key.
# 3. Add a property value to the key as an one-bit-set integer.
#    (The value has to be unique)
#
# ATTENTION: 
# You should not change or delete the uppercase primitives because there 
# are hardcoded used in JOOX. The lowercase primitives are free to change
# or delete.
#

PRIMITIVE= NUL VAR DBG TRC INF MSG WRN ERR FAT ALL exa
PRIMITIVE.ALL=7FFFFFFF
PRIMITIVE.NUL=00000000
PRIMITIVE.VAR=00000001
PRIMITIVE.DBG=00000002
PRIMITIVE.TRC=00000004
PRIMITIVE.INF=00000008
PRIMITIVE.MSG=00000010
PRIMITIVE.WRN=00000020
PRIMITIVE.ERR=00000040
PRIMITIVE.FAT=00000080
PRIMITIVE.exa=40000000



###############################################################################
#
# Composed Levels
#
# You can define your own composed levels (see the example 'example'):
# 1. Add the new name of the composed level to the LEVEL Property.
#    (You should use more than three lowercase letters for the keyname 
#     to divide your composed levels from the predefined uppercase ones and the
#     three letter primitives)
# 2. Define a new property with the name of your composed level as the key.
# 3. Add a property value to the key as a set of one or more primitive levels.
#
# ATTENTION: 
# You should not change the names of the uppercase composed levels because there
# used in JOOX. But you can change the sets of primitives as you like also for
# the uppercase levels.
#

LEVEL=NONE SILENT NORMAL VERBOSE TRACE DEBUG EVERY example 
LEVEL.NONE=NUL
LEVEL.SILENT=ERR FAT
LEVEL.NORMAL=WRN ERR FAT
LEVEL.VERBOSE=MSG WRN ERR FAT
LEVEL.TRACE=INF TRC MSG WRN ERR FAT
LEVEL.DEBUG=DBG VAR INF TRC MSG WRN ERR FAT
LEVEL.EVERY=ALL
LEVEL.example=VAR exa TRC INF



###############################################################################
#
# Logging Format Definitions
#
# These Formats are predefined:
# %C Fullqualified classname
# %c Simple classname
# %d Date and time
# %T Type of the Message
# %m Methodname (used from the in() method)
# %n Newline
# %s The user defined message
# %t Threadname
# %g Threadgroupname
# %% the percent sign
# %i The indent of the tracing feature.
# %e The Exceptiontext
# %o By Exception aborted Methods (only use it after %e!!!)
# %x The Exception Stacktrace
# %1 %2 ... Arguments of the corresponding method
#
# You can use some formatdefinitions for each primitive level to produce a 
# special output for your need.
#
# You have to define a format for each primitive
#

FORMAT.NUL=.
FORMAT.ALL=[%d{LEFT, ,28,28,'yyyy.MM.dd HH:mm:ss,SSS z'} %g{RIGHT, ,8,8}.%t{LEFT, , 8,8} %C{LEFT, ,38,38}] %i
FORMAT.VAR=%1 = %2
FORMAT.DBG=%s
FORMAT.TRC=%m: %s
FORMAT.INF=%s
FORMAT.MSG=%s
FORMAT.WRN=WARNING: %s
FORMAT.ERR=>>>>EXCEPTION: %e catched by %m%n%o>>>>EXCEPTION STACKTRACE START<<<<%n>>>>%x%n>>>>EXCEPTION STACKTRACE END<<<<
FORMAT.FAT=>>>>FATAL ERROR: %e%n>>>>FATAL ERROR STACKTRACE START<<<<%n>>>>%x%n>>>>FATAL ERROR STACKTRACE END<<<<
FORMAT.exa=%1%2



###############################################################################
#
# Logchannels
#
# (actual not in use/only for future releases)
#

CHANNEL=STD ERR FILE
CHANNEL.STD=System.out
CHANNEL.STD.PRIMITIVE=ALL
CHANNEL.ERR=System.err
CHANNEL.ERR.PRIMITIVE=WRN ERR FAT
CHANNEL.FILE=
CHANNEL.FILE.PRIMITIVE=NUL



###############################################################################
#
# Loglevel Definitions for Classes or Packages
#
# The DEFAULT Primitive set the logging level for all classes which generate
# log output and has no more detailed logging definitions.
#
# You can add your own classes or packages for a more detailed logging level.
# 1. Use the fully qualified classname or a package name as the key.
# 2. Set the value of a set of one or more composed or primitive levelnames.
#    (You can also use the minus sign '-' to switch a level off.
#     Example: 'SILENT - ERR' will only log FAT Messages.)
#
# ATTENTION:
# Remember that allways the most exact package- or classname will be used.
# Only if no agreement of the logged classname with any key is found the 
# default key will be used.
#

DEFAULT=TRACE
#org.joox=NORMAL
#org.joox.core.spec=NORMAL
#org.joox.demo.Demo=TRACE VAR
#org.joox.core.spec.AbstractAdministrator=NORMAL
org.joox.core.spec.Generator=NORMAL
org.joox.core.spec.AbstractModel=NORMAL
